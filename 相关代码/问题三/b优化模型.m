
% 假设有33个蔬菜品类
categories = 33;

% 假设商超的销售空间限制为27个可售单品
products = 27;

% 假设每个蔬菜品类的最小陈列量为2.5千克
qty = 2.5;
min=[1.7 1.4 1 0.9 1.9 1.5 3.2 1.8 0.1 3 1 1 1.2 0.9 2 1.1 1.1 1.5 11.3 1.8 5.9 1.5 1.8 3.6 5.5 1.4 1.5 2.9 0.7 1.5 3 4 12];
max=[19.8 14 18 23.6 25.8 19.8 27.6 8.8 19.8 12 6.9 11.8 6.8 31.6 18 19.9 8.5 9.9 33.6 4.9 21.6 18 16 21.6 13 27.6 6.9 13.8 8.9 9.9 21.6 23.6 26]
% 
wholesale_prices = [6.827 5.211 4.076 5.042 4.359 4.001 6.495 3.532 4.629 3.383 2.608 2.305 2.268 7.642 5.357 3.149 1.982 3.072 12.837 1.632 10.528 5.631 5.299 7.617 4.638 13.722 3.479 4.913 2.353 2.332 5.795 9.927 10.234];

% 假设蔬菜品类A、B、C的销售量与时间的关联关系为线性函数
% 假设未来一段时间内的需求量为
demand_forecast = [20.65 6.77 7.601 14.023 5.598 5.026 0 11 4.903 6.795 36 23 16 7.567 17.598 26 13 9 0.768 8 2.267 14.265 1.749 3.451 0 5.993 12 2 15 13 6.851 3.329 0.528];

% 定义目标函数：商超的收益
objective = @(x) -sum(demand_forecast .* x(categories+1:end) - x(1:categories) .* wholesale_prices);

% 定义约束条件
A = [-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
    -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ;
     0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 -1 -1 -1 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
     0 0 0 0 0 0 0 0 0 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
     0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 -1 -1 -1 -1 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 -1 -1  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
      1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0;
    ];
b = [-390.13959;-23.994;-150.442;-25.925;-86.142;-49.82;-16.092;781.579];
Aeq = [];
beq = [];
lb = [qty* ones(1, categories), min];
ub = [inf* ones(1, categories), max];

 nonlcon = @(x) deal([(-63546.473+31085.998*x(1:num_categories).^1)/(31085.998+179.644*x(1:num_categories).^1-234.995*x(1:num_categories).^2+103.251*x(1:num_categories).^3+x(1:num_categories).^4)-demand_forecast], []);
 %(-63546.473+31085.998*x^1)/(31085.998+179.644*x^1-234.995*x^2+103.251*x^3+ x^4)
% 设置初始补货量和定价
x0 = zeros(1, num_categories * 2);

% 使用优化算法求解最优补货计划和定价策略
options = optimoptions('fmincon', 'Display', 'iter');
[x, fval] = fmincon(objective, x0, A, b, Aeq, beq, lb, ub, nonlcon, options);

% 输出最优补货量和定价
optimal_replenishment = x(1:num_categories);
optimal_prices = x(num_categories+1:end);

disp("最优补货量：");
disp(optimal_replenishment);
disp("最优定价：");
disp(optimal_prices);